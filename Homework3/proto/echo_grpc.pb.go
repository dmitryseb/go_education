// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: proto/echo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankClient is the client API for Bank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankClient interface {
	GetAccountResponse(ctx context.Context, in *GetName, opts ...grpc.CallOption) (*Balance, error)
	CreateAccountRequest(ctx context.Context, in *CreateAccount, opts ...grpc.CallOption) (*Status, error)
	ChangeAccountRequest(ctx context.Context, in *ChangeAccount, opts ...grpc.CallOption) (*Status, error)
	PathAccountRequest(ctx context.Context, in *PathAccount, opts ...grpc.CallOption) (*Status, error)
	DeleteAccountRequest(ctx context.Context, in *DeleteAccount, opts ...grpc.CallOption) (*Status, error)
}

type bankClient struct {
	cc grpc.ClientConnInterface
}

func NewBankClient(cc grpc.ClientConnInterface) BankClient {
	return &bankClient{cc}
}

func (c *bankClient) GetAccountResponse(ctx context.Context, in *GetName, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/proto.Bank/GetAccountResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) CreateAccountRequest(ctx context.Context, in *CreateAccount, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.Bank/CreateAccountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) ChangeAccountRequest(ctx context.Context, in *ChangeAccount, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.Bank/ChangeAccountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) PathAccountRequest(ctx context.Context, in *PathAccount, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.Bank/PathAccountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) DeleteAccountRequest(ctx context.Context, in *DeleteAccount, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.Bank/DeleteAccountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServer is the server API for Bank service.
// All implementations must embed UnimplementedBankServer
// for forward compatibility
type BankServer interface {
	GetAccountResponse(context.Context, *GetName) (*Balance, error)
	CreateAccountRequest(context.Context, *CreateAccount) (*Status, error)
	ChangeAccountRequest(context.Context, *ChangeAccount) (*Status, error)
	PathAccountRequest(context.Context, *PathAccount) (*Status, error)
	DeleteAccountRequest(context.Context, *DeleteAccount) (*Status, error)
	mustEmbedUnimplementedBankServer()
}

// UnimplementedBankServer must be embedded to have forward compatible implementations.
type UnimplementedBankServer struct {
}

func (UnimplementedBankServer) GetAccountResponse(context.Context, *GetName) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountResponse not implemented")
}
func (UnimplementedBankServer) CreateAccountRequest(context.Context, *CreateAccount) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountRequest not implemented")
}
func (UnimplementedBankServer) ChangeAccountRequest(context.Context, *ChangeAccount) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountRequest not implemented")
}
func (UnimplementedBankServer) PathAccountRequest(context.Context, *PathAccount) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathAccountRequest not implemented")
}
func (UnimplementedBankServer) DeleteAccountRequest(context.Context, *DeleteAccount) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountRequest not implemented")
}
func (UnimplementedBankServer) mustEmbedUnimplementedBankServer() {}

// UnsafeBankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServer will
// result in compilation errors.
type UnsafeBankServer interface {
	mustEmbedUnimplementedBankServer()
}

func RegisterBankServer(s grpc.ServiceRegistrar, srv BankServer) {
	s.RegisterService(&Bank_ServiceDesc, srv)
}

func _Bank_GetAccountResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).GetAccountResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bank/GetAccountResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).GetAccountResponse(ctx, req.(*GetName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_CreateAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).CreateAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bank/CreateAccountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).CreateAccountRequest(ctx, req.(*CreateAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_ChangeAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).ChangeAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bank/ChangeAccountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).ChangeAccountRequest(ctx, req.(*ChangeAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_PathAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).PathAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bank/PathAccountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).PathAccountRequest(ctx, req.(*PathAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_DeleteAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).DeleteAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bank/DeleteAccountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).DeleteAccountRequest(ctx, req.(*DeleteAccount))
	}
	return interceptor(ctx, in, info, handler)
}

// Bank_ServiceDesc is the grpc.ServiceDesc for Bank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Bank",
	HandlerType: (*BankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountResponse",
			Handler:    _Bank_GetAccountResponse_Handler,
		},
		{
			MethodName: "CreateAccountRequest",
			Handler:    _Bank_CreateAccountRequest_Handler,
		},
		{
			MethodName: "ChangeAccountRequest",
			Handler:    _Bank_ChangeAccountRequest_Handler,
		},
		{
			MethodName: "PathAccountRequest",
			Handler:    _Bank_PathAccountRequest_Handler,
		},
		{
			MethodName: "DeleteAccountRequest",
			Handler:    _Bank_DeleteAccountRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/echo.proto",
}
